#include <iostream>

#include "coroutine.h"
#include "PluginsManager.h"
#include "EncryptionManager.h"

using namespace Util;
void test_co()
{
	coroutine_t co1, co2;
	co1 = coroutine::create([&](void)->void {
		std::cout << "co1+" << std::endl;
		auto r1 = (int*)coroutine::yield(co1, (void*)1);
		if (r1 != nullptr)
			std::cout << "co1+" << *r1 << std::endl;

		});
	std::function<void(int)> fu = [&](int i) {
		std::cout << "co2+" << i << std::endl;
		coroutine::yield(co2);
	};
	int* i = new int(10);
	co2 = coroutine::create(fu, *i);
	while (coroutine::status(co1) && coroutine::status(co1))
	{
		auto y1 = (int*)coroutine::resume(co1, (void*)i);
		if (y1 != nullptr)
			std::cout << "main+" << reinterpret_cast<int>(y1) << std::endl;
		coroutine::resume(co2);

	}
}
int main()
{
	auto ins = PluginsManager::GetInstance();
	ins->load("AES.dll");

	auto aespl = ins->getPlugin("aes");
	aespl->install();

	uint8_t key[] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t out[] = { 0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
				   0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
				   0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
				   0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7 };
	uint8_t in[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
					  0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
					  0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
					  0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
	uint8_t _in[] = { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
					  0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
					  0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
					  0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 };
	uint8_t _in_[64];
	auto aes = EncryptionManager::GetInstance()->aes;
	aes->SetKey(key);
	aes->Encrypt(in, sizeof(in) / sizeof(in[0]));
	if (0 == memcmp((char*)in, (char*)out, 64))
		printf("SUCCESS!\n");
	memcpy(_in_, in, 64);
	aes->Decrypt(_in_, 64);
	if (0 == memcmp((char*)_in_, (char*)_in, 64))
		printf("SUCCESS!\n");
	//aes->Decrypt(out, sizeof(out) / sizeof(out[0]));
	std::string s = "hello world";
	auto len = s.length();
	uint8_t* a = new uint8_t[len];
	uint8_t* b = new uint8_t[len];

	int j = 0;
	for (auto i : s)
	{
		a[j++] = i;
	}
	memcpy(b, a, len);
	aes->Encrypt(a, len);
	aes->Decrypt(a, len);
	std::string ds((char*)a);

	if (0 == memcmp((char*)a, (char*)b, len))
		printf("SUCCESS!\n");

	std::cin.get();
	return 0;
}
